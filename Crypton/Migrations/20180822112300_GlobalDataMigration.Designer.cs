// <auto-generated />
using System;
using Crypton.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crypton.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180822112300_GlobalDataMigration")]
    partial class GlobalDataMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crypton.Models.AlertViewModels.Alert", b =>
                {
                    b.Property<int>("alertID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("alertTypeID");

                    b.Property<int>("conversionID");

                    b.Property<DateTime>("createdOn");

                    b.Property<DateTime>("fulfilledOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("isFulfilled");

                    b.Property<double>("limit");

                    b.Property<int>("userID");

                    b.Property<int>("variationID");

                    b.HasKey("alertID");

                    b.HasIndex("alertTypeID");

                    b.HasIndex("conversionID");

                    b.HasIndex("variationID");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Crypton.Models.AlertViewModels.AlertType", b =>
                {
                    b.Property<int>("alertTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("alertType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("isEnabled");

                    b.HasKey("alertTypeID");

                    b.ToTable("AlertType");
                });

            modelBuilder.Entity("Crypton.Models.AlertViewModels.Log", b =>
                {
                    b.Property<int>("logID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("alertID");

                    b.Property<int>("alertTypeID");

                    b.Property<string>("description")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("logDate")
                        .HasColumnType("datetime");

                    b.Property<string>("status")
                        .HasColumnType("varchar(50)");

                    b.HasKey("logID");

                    b.HasIndex("alertID");

                    b.HasIndex("alertTypeID");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Crypton.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Crypton.Models.CurrencyViewModels.Currency", b =>
                {
                    b.Property<int>("currencyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("currencyCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("currencyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double>("currentMarketCap");

                    b.Property<double>("currentVolume");

                    b.Property<string>("description")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("isEnabled");

                    b.Property<DateTime>("lastUpdated");

                    b.Property<string>("logoPath")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("marketRank");

                    b.Property<string>("officialWebsite")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("providerCurrencyID")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<double>("totalVolume");

                    b.HasKey("currencyID");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Crypton.Models.CurrencyViewModels.GlobalData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("activeCurrencies");

                    b.Property<int>("activeMarkets");

                    b.Property<decimal>("bitcoinDominance")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("numeric(18,4)");

                    b.Property<DateTime>("lastUpdated");

                    b.Property<int>("providerId");

                    b.Property<decimal>("totalMarketCap")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("id");

                    b.HasIndex("providerId");

                    b.ToTable("GlobalData");
                });

            modelBuilder.Entity("Crypton.Models.CurrencyViewModels.Provider", b =>
                {
                    b.Property<int>("providerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("apiKey")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("apiUrl")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("providerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("providerWebsite")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("providerID");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Crypton.Models.PriceViewModels.ConversionRate", b =>
                {
                    b.Property<int>("conversionID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("conversionDate")
                        .HasColumnType("datetime");

                    b.Property<double>("conversionRate");

                    b.Property<int?>("sourceCurrencyID")
                        .IsRequired();

                    b.Property<int?>("targetCurrencyID")
                        .IsRequired();

                    b.HasKey("conversionID");

                    b.HasIndex("sourceCurrencyID");

                    b.HasIndex("targetCurrencyID");

                    b.ToTable("ConversionRate");
                });

            modelBuilder.Entity("Crypton.Models.PriceViewModels.CurrencyPrice", b =>
                {
                    b.Property<int>("currencyPriceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("currencyID");

                    b.Property<double>("priceBTC");

                    b.Property<DateTime>("priceDate")
                        .HasColumnType("datetime");

                    b.Property<double>("priceEuro");

                    b.Property<double>("priceUSD");

                    b.Property<int>("providerID");

                    b.HasKey("currencyPriceID");

                    b.HasIndex("currencyID");

                    b.HasIndex("providerID");

                    b.ToTable("CurrencyPrice");
                });

            modelBuilder.Entity("Crypton.Models.PriceViewModels.Variation", b =>
                {
                    b.Property<int>("variationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("variationType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("variationID");

                    b.ToTable("Variation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Crypton.Models.AlertViewModels.Alert", b =>
                {
                    b.HasOne("Crypton.Models.AlertViewModels.AlertType", "alertType")
                        .WithMany()
                        .HasForeignKey("alertTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Crypton.Models.PriceViewModels.ConversionRate", "conversionRate")
                        .WithMany()
                        .HasForeignKey("conversionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Crypton.Models.PriceViewModels.Variation", "variation")
                        .WithMany()
                        .HasForeignKey("variationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Crypton.Models.AlertViewModels.Log", b =>
                {
                    b.HasOne("Crypton.Models.AlertViewModels.Alert", "alert")
                        .WithMany()
                        .HasForeignKey("alertID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Crypton.Models.AlertViewModels.AlertType", "alertType")
                        .WithMany()
                        .HasForeignKey("alertTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Crypton.Models.CurrencyViewModels.GlobalData", b =>
                {
                    b.HasOne("Crypton.Models.CurrencyViewModels.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Crypton.Models.PriceViewModels.ConversionRate", b =>
                {
                    b.HasOne("Crypton.Models.CurrencyViewModels.Currency", "sourceCurrency")
                        .WithMany()
                        .HasForeignKey("sourceCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Crypton.Models.CurrencyViewModels.Currency", "targetCurrency")
                        .WithMany()
                        .HasForeignKey("targetCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Crypton.Models.PriceViewModels.CurrencyPrice", b =>
                {
                    b.HasOne("Crypton.Models.CurrencyViewModels.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("currencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Crypton.Models.CurrencyViewModels.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("providerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Crypton.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Crypton.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Crypton.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Crypton.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
